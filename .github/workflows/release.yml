# This workflow will build and sign a new release of your library and publish it to Maven Central.
# It is triggered manually by creating a new release in the GitHub UI.

name: Publish Release to Maven Central

on:
  release:
    types: [created] # This workflow runs when a new GitHub release is created

jobs:
  publish:
    runs-on: ubuntu-latest

    env:
      OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
      OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
      GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
      GPG_SECRET_KEY_PASSPHRASE: ${{ secrets.GPG_SECRET_KEY_PASSPHRASE }}
      GPG_SIGNING_KEY_ID: ${{ secrets.GPG_SIGNING_KEY_ID }}

    steps:
      # 1. Check out the repository code
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          for v in OSSRH_USERNAME OSSRH_TOKEN GPG_SECRET_KEY GPG_SECRET_KEY_PASSPHRASE GPG_SIGNING_KEY_ID; do
            if [ -z "${!v}" ]; then
              echo "Missing secret: $v" >&2
              exit 1
            fi
          done
       

      # 2. Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle build
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      # 3. Grant execute permission for gradlew
      - name: Grant Gradlew executable permissions
        run: chmod +x gradlew

      - name: Derive version from tag
        id: version
        run: |
          RAW_TAG='${{ github.ref_name }}'
          VERSION="${RAW_TAG#v}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      # 4. Import GPG key for artifact signing
      - name: Import GPG Keys
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_SECRET_KEY }}
          passphrase: ${{ secrets.GPG_SECRET_KEY_PASSPHRASE }}

      # Optional: verify key import
      - name: Verify GPG key
        run: gpg --list-secret-keys

      # 5. Publish, Close, and Release to Maven Central
      - name: Publish Release to Maven Central
        env:
          ORG_GRADLE_PROJECT_signing.gnupg.keyName: ${{ secrets.GPG_SIGNING_KEY_ID }}
          ORG_GRADLE_PROJECT_signing.gnupg.passphrase: ${{ secrets.GPG_SECRET_KEY_PASSPHRASE }}
       # env:
          # Use names that clearly map to the Sonatype OSSRH service
       #   OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }} #Your Sonatype OSSRH username
       #   OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }} #Your Sonatype OSSRH password or token
        #  GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
       #   GPG_SIGNING_KEY_ID: ${{ secrets.GPG_SIGNING_KEY_ID }} #The last 8 characters of your GPG key ID
        #  GPG_SECRET_KEY_PASSPHRASE: ${{ secrets.GPG_SECRET_KEY_PASSPHRASE }} #Your GPG key passphrase

      #If you keep useInMemoryPgpKeys in build.gradle.kts, you can omit the three -Psigning.* properties
      # and just export GPG_SECRET_KEY / GPG_SECRET_KEY_PASSPHRASE.
        run: |
          ./gradlew \
            -Pversion=${{ steps.version.outputs.version }} \
            -PossrhUsername="$OSSRH_USERNAME" \
            -PossrhPassword="$OSSRH_TOKEN" \
            :nicetoast:publishAllPublicationsToMavenCentralRepository \
            --no-parallel --stacktrace
